{"version":3,"sources":["store/middlewares/dataAccessLayer.js","store/actionTypes/index.js","utils/index.js","utils/errorMessage.js","utils/newComment.js","utils/updateComments.js","store/middlewares/errorMiddleware.js","store/middlewares/index.js","store/reducers/menuReducer.js","constants/colors.js","constants/handlers.js","constants/index.js","store/reducers/commentsReducer.js","store/reducers/index.js","store/index.js","components/Page/index.js","components/Page/Page.js","components/Button/index.js","components/Button/Button.js","components/Badge/index.js","components/Badge/Badge.js","components/Input/index.js","components/Input/Input.js","components/Title/index.js","components/Title/Title.js","components/List/List.js","components/List/ListItem.js","components/List/index.js","components/Menu/index.js","components/Menu/Menu.js","selectors/index.js","store/actions/index.js","containers/MenuContainer.js","components/ColorSelect/index.js","components/ColorSelect/ColorSelect.js","components/Icon/index.js","components/Icon/Icon.js","components/CommentsList/CommentsList.js","components/CommentsList/index.js","containers/CommentsListContainer.js","components/MainPage/MainPage.js","components/SubTitle/index.js","components/SubTitle/SubTitle.js","components/Sidebar/index.js","components/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["getInitializeData","Promise","res","data","then","menuItems","map","item","Object","objectSpread","comments_number","id","comments","find","itemId","value","length","dataAccessLayer","store","next","action","type","payload","rej","getState","menu","active","utils","errorMessage","toast","error","position","POSITION","TOP_LEFT","autoClose","newComment","state","console","log","comment","color","toConsumableArray","concat","updateComments","errorMiddleware","middlewares","thunk","createLogger","applyMiddleware","apply","initialState","proccessed","menuReducer","arguments","undefined","defineProperty","filter","BLUE","GREEN","GREY","ORANGE","RED","NEW_COMMENT","constants","colors","handlers","combineReducers","commentsReducer","persistConfig","key","storage","persistedReducer","persistReducer","reducers","createStore","compose","src_store","persistor","persistStore","Page","_ref","className","children","react_default","a","createElement","Button","label","onClick","Badge","Input","placeholder","textarea","onChange","Title","List","title","header","components_Title","ListItem","Item","Menu","createItem","deleteItem","updateActive","updateNameItem","components_List","components_Input","event","target","components_Button","components_Badge","onDelete","stopPropagation","getActive","updateCommentsById","connect","getMenu","getMenuValue","dispatch","ColorSelect","open","values","Icon","keyMap","CommentsList","withState","withHandlers","handleOnChangeColor","_ref2","changeColorComment","changeOpen","handleOnClick","_ref3","_ref4","changeComment","createComment","components_Icon","index_es","components_ColorSelect","getCommentsById","getCommentValue","getColorComment","MainPage","components_Page","MenuContainer","CommentsListContainer","SubTitle","Sidebar","App","es","redux","integration_react","loading","components_Sidebar","components_SubTitle","components_MainPage_MainPage","lib","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d794b68f.chunk.js","sourcesContent":["import * as actionTypes from \"../actionTypes\";\r\nimport data from \"./data.json\";\r\n\r\nconst getCommentsNumber = id =>\r\n  data.comments.find(item => item.itemId === id).value.length;\r\n\r\nconst getInitializeData = () =>\r\n  new Promise(res => res(data)).then(data =>\r\n    data.menuItems.map(item => ({\r\n      ...item,\r\n      comments_number: getCommentsNumber(item.id)\r\n    }))\r\n  );\r\n\r\nconst getCommentsById = id =>\r\n  new Promise((res, rej) => (id ? res(data) : rej(\"active is null\"))).then(\r\n    data => data.comments.find(comments => comments.itemId === id)\r\n  );\r\n\r\nconst dataAccessLayer = store => next => action => {\r\n  switch (action.type) {\r\n    case actionTypes.INITIALIZE_APP:\r\n      return getInitializeData().then(data =>\r\n        next({\r\n          ...action,\r\n          payload: { data }\r\n        })\r\n      );\r\n    case actionTypes.UPDATE_COMMENTS_BY_ID:\r\n      return getCommentsById(action.payload.id).then(comments =>\r\n        next({\r\n          ...action,\r\n          payload: { comments }\r\n        })\r\n      );\r\n    case actionTypes.CREATE_COMMENT:\r\n      return next({\r\n        ...action,\r\n        payload: {\r\n          ...action.payload,\r\n          itemId: store.getState().menu.active\r\n        }\r\n      });\r\n    case actionTypes.CREATE_ITEM:\r\n      return next({\r\n        ...action,\r\n        payload: {\r\n          id: store.getState().menu.data.length + 1\r\n        }\r\n      });\r\n    default:\r\n      return next(action);\r\n  }\r\n};\r\n\r\nexport default dataAccessLayer;\r\n","export const INITIALIZE_APP = \"INITIALIZE_APP\";\r\n\r\nexport const UPDATE_COMMENTS_BY_ID = \"UPDATE_COMMENTS_BY_ID\";\r\n\r\nexport const UPDATE_ACTIVE = \"UPDATE_ACTIVE\";\r\n\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\n\r\nexport const CREATE_ITEM = \"CREATE_ITEM\";\r\n\r\nexport const CREATE_COMMENT = \"CREATE_COMMENT\";\r\n\r\nexport const UPDATE_NAME_INPUT = \"UPDATE_NAME_INPUT\";\r\n\r\nexport const CHANGE_COMMENT_VALUE = \"CHANGE_COMMENT_VALUE\";\r\n\r\nexport const CHANGE_COLOR_COMMENT = \"CHANGE_COLOR_COMMENT\";\r\n\r\nexport const REHYDRATE = \"persist/REHYDRATE\";\r\n","import updateComments from \"./updateComments\";\r\nimport newComment from \"./newComment\";\r\nimport errorMessage from \"./errorMessage\";\r\n\r\nexport default { errorMessage, newComment, updateComments };\r\n","import { toast } from \"react-toastify\";\r\n\r\nconst errorMessage = value =>\r\n  toast.error(value, {\r\n    position: toast.POSITION.TOP_LEFT,\r\n    autoClose: 5000\r\n  });\r\n\r\nexport default errorMessage;\r\n","const newComment = (state, itemId) =>\r\n  state.data.map(item => {\r\n    if (item.itemId === itemId) {\r\n      console.log(item);\r\n      const comment = {\r\n        id: item.value.length + 1,\r\n        value: state.value,\r\n        color: state.color\r\n      };\r\n\r\n      const value = item.value ? [...item.value, comment] : [comment];\r\n\r\n      return {\r\n        ...item,\r\n        value: value\r\n      };\r\n    }\r\n\r\n    return item;\r\n  });\r\n\r\nexport default newComment;\r\n","const updateComments = (state, comments) => {\r\n  if (!comments) {\r\n    return [...state.data, { itemId: state.data.length + 1, value: [] }];\r\n  }\r\n\r\n  const commentsIsFind = state.data.find(\r\n    item => item.itemId === comments.itemId\r\n  );\r\n\r\n  if (commentsIsFind) {\r\n    return state.data;\r\n  }\r\n\r\n  return [...state.data, comments];\r\n};\r\n\r\nexport default updateComments;\r\n","import * as actionTypes from \"../actionTypes\";\r\nimport utils from \"../../utils\";\r\n\r\nconst errorMiddleware = store => next => action => {\r\n  switch (action.type) {\r\n    case actionTypes.CREATE_COMMENT:\r\n      if (!store.getState().comments.value) {\r\n        return utils.errorMessage(\"Comment input field is empty\");\r\n      }\r\n      return next(action);\r\n    case actionTypes.CREATE_ITEM:\r\n      if (!store.getState().menu.value) {\r\n        return utils.errorMessage(\"Item input field is empty\");\r\n      }\r\n      return next(action);\r\n    default:\r\n      return next(action);\r\n  }\r\n};\r\n\r\nexport default errorMiddleware;\r\n","import { applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\n\r\nimport dataAccessLayer from \"./dataAccessLayer\";\r\nimport errorMiddleware from \"./errorMiddleware\";\r\n\r\nconst middlewares = [thunk, dataAccessLayer, errorMiddleware, createLogger()];\r\n\r\nexport default applyMiddleware(...middlewares);\r\n","import * as actionTypes from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  proccessed: true,\r\n  data: [],\r\n  active: null,\r\n  value: \"\"\r\n};\r\n\r\nconst menuReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.INITIALIZE_APP:\r\n      return {\r\n        ...state,\r\n        proccessed: false,\r\n        data: action.payload.data\r\n      };\r\n    case actionTypes.UPDATE_ACTIVE:\r\n      return {\r\n        ...state,\r\n        active: action.payload.id\r\n      };\r\n    case actionTypes.UPDATE_NAME_INPUT:\r\n      return {\r\n        ...state,\r\n        value: action.payload.value\r\n      };\r\n    case actionTypes.CREATE_ITEM:\r\n      return {\r\n        ...state,\r\n        value: \"\",\r\n        data: [\r\n          ...state.data,\r\n          { id: action.payload.id, value: state.value, comments_number: 0 }\r\n        ],\r\n        value: \"\"\r\n      };\r\n    case actionTypes.DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        active: state.active === action.payload.id ? null : state.active,\r\n        data: [...state.data.filter(item => item.id !== action.payload.id)]\r\n      };\r\n    case actionTypes.CREATE_COMMENT:\r\n      return {\r\n        ...state,\r\n        data: state.data.map(item =>\r\n          item.id === state.active\r\n            ? { ...item, comments_number: item.comments_number + 1 }\r\n            : item\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default menuReducer;\r\n","export const BLUE = \"blue\";\r\nexport const GREEN = \"green\";\r\nexport const GREY = \"grey\";\r\nexport const ORANGE = \"orange\";\r\nexport const RED = \"red\";\r\n","export const NEW_COMMENT = \"NEW_COMMENT\";\r\n","import * as colors from \"./colors\";\r\nimport * as handlers from \"./handlers\";\r\n\r\nexport default { colors, handlers };\r\n","import * as actionTypes from \"../actionTypes\";\r\nimport utils from \"../../utils\";\r\nimport constants from \"../../constants\";\r\n\r\nconst initialState = {\r\n  data: [],\r\n  value: \"\",\r\n  color: constants.colors.GREY\r\n};\r\n\r\nconst menuReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.CREATE_ITEM:\r\n      return {\r\n        ...state,\r\n        data: [...state.data, { itemId: action.payload.id, value: [] }]\r\n      };\r\n    case actionTypes.CHANGE_COMMENT_VALUE:\r\n      return {\r\n        ...state,\r\n        value: action.payload.value\r\n      };\r\n    case actionTypes.CHANGE_COLOR_COMMENT:\r\n      return {\r\n        ...state,\r\n        color: action.payload.color\r\n      };\r\n    case actionTypes.CREATE_COMMENT:\r\n      return {\r\n        ...state,\r\n        data: utils.newComment(state, action.payload.itemId),\r\n        value: \"\"\r\n      };\r\n    case actionTypes.DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        data: state.data.filter(item => item.itemId !== action.payload.id)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default menuReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport menuReducer from \"./menuReducer\";\r\nimport commentsReducer from \"./commentsReducer\";\r\n\r\nexport default combineReducers({\r\n  menu: menuReducer,\r\n  comments: commentsReducer\r\n});\r\n","import { createStore, compose } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\n\r\n// import { initializeApp } from \"./actions\"; // Initialize data for test;\r\nimport middlewares from \"./middlewares\";\r\nimport reducers from \"./reducers\";\r\n\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web and AsyncStorage for react-native\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = createStore(persistedReducer, undefined, compose(middlewares));\r\n\r\n// store.dispatch(initializeApp()); // Initialize data for test;\r\nconst persistor = persistStore(store);\r\n\r\nexport default {\r\n  store,\r\n  persistor\r\n};\r\n","import Page from \"./Page\";\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Page.css\";\r\n\r\nconst Page = ({ className, children }) => (\r\n  <div className={`page ${className || \"\"}`}>{children}</div>\r\n);\r\n\r\nPage.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Page;\r\n","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ className, label, onClick }) => (\r\n  <button className={`btn ${className || \"\"}`} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default Button;\r\n","import Badge from \"./Badge\";\r\n\r\nexport default Badge;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Badge.css\";\r\n\r\nconst Badge = ({ className, value }) => (\r\n  <div className={`badge-container ${className}`}>\r\n    <span className=\"badge\">{value}</span>\r\n  </div>\r\n);\r\n\r\nBadge.propTypes = {\r\n  className: PropTypes.string,\r\n  value: PropTypes.number\r\n};\r\n\r\nexport default Badge;\r\n","import Input from \"./Input\";\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ className, placeholder, textarea, value, onChange }) => (\r\n  <div className={`input-container ${className || \"\"}`}>\r\n    {textarea ? (\r\n      <textarea\r\n        className=\"input\"\r\n        placeholder={placeholder}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    ) : (\r\n      <input\r\n        className=\"input\"\r\n        placeholder={placeholder}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    )}\r\n  </div>\r\n);\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n  textarea: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default Input;\r\n","import Title from \"./Title\";\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Title.css\";\r\n\r\nconst Title = ({ className, children }) => (\r\n  <span className={`title ${className || \"\"}`}>{children}</span>\r\n);\r\n\r\nTitle.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Title from \"../Title\";\r\n\r\nimport \"./List.css\";\r\n\r\nconst List = ({ title, header, children, className }) => (\r\n  <div className=\"list-container\">\r\n    <div className={`list ${className || \"\"}`}>\r\n      <Title className=\"list-title\">{title}</Title>\r\n      {header && header}\r\n      <div className=\"list-item-container\">{children}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nList.propTypes = {\r\n  title: PropTypes.string,\r\n  header: PropTypes.node,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ className, children, active, onClick }) => (\r\n  <div className={`list-item ${className || \"\"}`} onClick={onClick}>\r\n    <span className={`list-indicator ${active ? \"active\" : \"\"}`} />\r\n    {children}\r\n  </div>\r\n);\r\n\r\nListItem.propTypes = {\r\n  active: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default ListItem;\r\n","import List from \"./List\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nList.Item = ListItem;\r\n\r\nexport default List;\r\n","import Menu from \"./Menu\";\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"../Button\";\r\nimport Badge from \"../Badge\";\r\nimport Input from \"../Input\";\r\nimport List from \"../List\";\r\n\r\nconst handleOnDelete = (onDelete, id) => event => {\r\n  event.stopPropagation();\r\n  onDelete(id);\r\n};\r\n\r\nconst Menu = ({\r\n  menu,\r\n  value,\r\n  active,\r\n  createItem,\r\n  deleteItem,\r\n  updateActive,\r\n  updateNameItem\r\n}) => (\r\n  <List\r\n    title={\"Items\"}\r\n    header={\r\n      <div className={\"header-items-list\"}>\r\n        <Input\r\n          className=\"header-input\"\r\n          value={value}\r\n          placeholder=\"Type name here...\"\r\n          onChange={event => updateNameItem(event.target.value)}\r\n        />\r\n        <Button\r\n          className=\"btn-success header-button\"\r\n          label=\"Add New\"\r\n          onClick={createItem}\r\n        />\r\n      </div>\r\n    }\r\n  >\r\n    {menu.map(item => (\r\n      <List.Item\r\n        key={item.value}\r\n        active={item.id === active}\r\n        onClick={() => updateActive(item.id)}\r\n      >\r\n        {item.value}\r\n        <Badge className=\"success-background\" value={item.comments_number} />\r\n        <Button\r\n          className=\"btn-danger outline\"\r\n          label={\"Delete\"}\r\n          onClick={handleOnDelete(deleteItem, item.id)}\r\n        />\r\n      </List.Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nMenu.propTypes = {\r\n  menu: PropTypes.array,\r\n  value: PropTypes.string,\r\n  createItem: PropTypes.func,\r\n  deleteItem: PropTypes.func,\r\n  updateActive: PropTypes.func,\r\n  updateNameItem: PropTypes.func\r\n};\r\n\r\nexport default Menu;\r\n","export const getCommentsById = (state, id) =>\r\n  state.comments.data.find(item => item.itemId === id).value;\r\n\r\nexport const getMenu = state => state.menu.data;\r\n\r\nexport const getActive = state => state.menu.active;\r\n\r\nexport const getMenuValue = state => state.menu.value;\r\n\r\nexport const getCommentValue = state => state.comments.value;\r\n\r\nexport const getColorComment = state => state.comments.color;\r\n","import * as actionTypes from \"../actionTypes\";\r\n\r\nexport const createItem = item => {\r\n  return {\r\n    type: actionTypes.CREATE_ITEM,\r\n    payload: { item }\r\n  };\r\n};\r\n\r\nexport const createComment = () => {\r\n  return {\r\n    type: actionTypes.CREATE_COMMENT\r\n  };\r\n};\r\n\r\nexport const changeComment = value => {\r\n  return {\r\n    type: actionTypes.CHANGE_COMMENT_VALUE,\r\n    payload: { value }\r\n  };\r\n};\r\n\r\nexport const changeColorComment = color => {\r\n  return {\r\n    type: actionTypes.CHANGE_COLOR_COMMENT,\r\n    payload: { color }\r\n  };\r\n};\r\n\r\nexport const deleteItem = id => {\r\n  return {\r\n    type: actionTypes.DELETE_ITEM,\r\n    payload: {\r\n      id\r\n    }\r\n  };\r\n};\r\n\r\nexport const initializeApp = () => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_APP\r\n  };\r\n};\r\n\r\nexport const updateActive = id => dispatch => {\r\n  dispatch(updateCommentsById(id));\r\n\r\n  dispatch({\r\n    type: actionTypes.UPDATE_ACTIVE,\r\n    payload: { id }\r\n  });\r\n};\r\n\r\nexport const updateNameItem = value => {\r\n  return {\r\n    type: actionTypes.UPDATE_NAME_INPUT,\r\n    payload: {\r\n      value\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentsById = id => {\r\n  return {\r\n    type: actionTypes.UPDATE_COMMENTS_BY_ID,\r\n    payload: { id }\r\n  };\r\n};\r\n","import { connect } from \"react-redux\";\r\n\r\nimport Menu from \"../components/Menu\";\r\n\r\nimport { getMenu, getActive, getMenuValue } from \"../selectors\";\r\n\r\nimport {\r\n  createItem,\r\n  deleteItem,\r\n  updateActive,\r\n  updateNameItem\r\n} from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  menu: getMenu(state),\r\n  active: getActive(state),\r\n  value: getMenuValue(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  createItem: () => dispatch(createItem()),\r\n  updateActive: id => dispatch(updateActive(id)),\r\n  deleteItem: id => dispatch(deleteItem(id)),\r\n  updateNameItem: value => dispatch(updateNameItem(value))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Menu);\r\n","import ColorSelect from \"./ColorSelect\";\r\n\r\nexport default ColorSelect;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport constants from \"../../constants\";\r\n\r\nimport \"./ColorSelect.css\";\r\n\r\nconst ColorSelect = ({ open, onChange }) =>\r\n  open && (\r\n    <div className=\"color-select-container\">\r\n      {Object.values(constants.colors).map(item => (\r\n        <div\r\n          className={`color-select-item ${item}`}\r\n          key={item}\r\n          onClick={() => onChange(item)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\nColorSelect.propTypes = { open: PropTypes.bool, onChange: PropTypes.func };\r\n\r\nexport default ColorSelect;\r\n","import Icon from \"./Icon\";\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Icon.css\";\r\n\r\nconst Icon = ({ color, children, onClick }) => (\r\n  <span className={`icon ${color}`} onClick={onClick}>\r\n    {children}\r\n  </span>\r\n);\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string,\r\n  children: PropTypes.element,\r\n  onCLick: PropTypes.func\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { HotKeys } from \"react-hotkeys\";\r\nimport { compose, withState, withHandlers } from \"recompose\";\r\n\r\nimport constants from \"../../constants\";\r\n\r\nimport ColorSelect from \"../ColorSelect\";\r\nimport Icon from \"../Icon\";\r\nimport Input from \"../Input\";\r\nimport List from \"../List\";\r\n\r\nimport \"./CommentsList.css\";\r\n\r\nconst keyMap = {\r\n  [constants.handlers.NEW_COMMENT]: \"ctrl+enter\"\r\n};\r\n\r\nconst handlers = createComment => ({\r\n  [constants.handlers.NEW_COMMENT]: () => createComment()\r\n});\r\n\r\nconst handlersComponent = {\r\n  handleOnChangeColor: ({ open, changeColorComment, changeOpen }) => color => {\r\n    changeColorComment(color);\r\n\r\n    changeOpen(!open);\r\n  },\r\n  handleOnClick: ({ open, changeOpen }) => event => {\r\n    event.stopPropagation();\r\n\r\n    changeOpen(!open);\r\n  }\r\n};\r\n\r\nconst CommentsList = ({\r\n  active,\r\n  color,\r\n  comments,\r\n  open,\r\n  value,\r\n  changeComment,\r\n  createComment,\r\n  handleOnClick,\r\n  handleOnChangeColor\r\n}) =>\r\n  active && (\r\n    <List title={`Comments #${active ? active : \"\"}`}>\r\n      {comments &&\r\n        comments.map(item => (\r\n          <List.Item className=\"comment-container\" key={item.id}>\r\n            <Icon color={item.color} />\r\n            {item.value}\r\n          </List.Item>\r\n        ))}\r\n      <HotKeys keyMap={keyMap} handlers={handlers(createComment)}>\r\n        <List.Item className=\"new-comment-container\">\r\n          <Icon color={color} onClick={handleOnClick}>\r\n            <ColorSelect open={open} onChange={handleOnChangeColor} />\r\n          </Icon>\r\n          <Input\r\n            textarea\r\n            value={value}\r\n            onChange={event => changeComment(event.target.value)}\r\n          />\r\n        </List.Item>\r\n      </HotKeys>\r\n    </List>\r\n  );\r\n\r\nCommentsList.propTypes = {\r\n  active: PropTypes.number,\r\n  color: PropTypes.value,\r\n  comments: PropTypes.array,\r\n  value: PropTypes.string,\r\n  open: PropTypes.bool,\r\n  changeComment: PropTypes.func,\r\n  changeColorComment: PropTypes.func,\r\n  createComment: PropTypes.func,\r\n  changeOpen: PropTypes.func,\r\n  handleOnClick: PropTypes.func,\r\n  handleOnChangeColor: PropTypes.func\r\n};\r\n\r\nexport default compose(\r\n  withState(\"open\", \"changeOpen\", false),\r\n  withHandlers(handlersComponent)\r\n)(CommentsList);\r\n","import CommentsList from \"./CommentsList\";\r\n\r\nexport default CommentsList;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport CommentsList from \"../components/CommentsList\";\r\n\r\nimport {\r\n  getActive,\r\n  getCommentsById,\r\n  getCommentValue,\r\n  getColorComment\r\n} from \"../selectors\";\r\n\r\nimport {\r\n  changeColorComment,\r\n  changeComment,\r\n  createComment\r\n} from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  active: getActive(state),\r\n  comments: getActive(state) ? getCommentsById(state, getActive(state)) : [],\r\n  value: getCommentValue(state),\r\n  color: getColorComment(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeComment: value => dispatch(changeComment(value)),\r\n  changeColorComment: color => dispatch(changeColorComment(color)),\r\n  createComment: () => dispatch(createComment())\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentsList);\r\n","import React from \"react\";\r\n\r\nimport Page from \"../Page\";\r\nimport MenuContainer from \"../../containers/MenuContainer\";\r\nimport CommentsListContainer from \"../../containers/CommentsListContainer\";\r\n\r\nconst MainPage = () => (\r\n  <Page>\r\n    <MenuContainer />\r\n    <CommentsListContainer />\r\n  </Page>\r\n);\r\n\r\nexport default MainPage;\r\n","import SubTitle from \"./SubTitle\";\r\n\r\nexport default SubTitle;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./SubTitle.css\";\r\n\r\nconst SubTitle = ({ className, children }) => (\r\n  <span className={`subtitle ${className || \"\"}`}>{children}</span>\r\n);\r\n\r\nSubTitle.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default SubTitle;\r\n","import Sidebar from \"./Sidebar\";\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ children }) => (\r\n  <div className=\"sidebar-container\">{children}</div>\r\n);\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { ToastContainer } from \"react-toastify\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport redux from \"./store\";\n\nimport MainPage from \"./components/MainPage/MainPage\";\nimport Title from \"./components/Title\";\nimport SubTitle from \"./components/SubTitle\";\nimport Sidebar from \"./components/Sidebar\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nconst App = () => (\n  <Provider store={redux.store}>\n    <PersistGate loading={null} persistor={redux.persistor}>\n      <div className=\"App\">\n        <Sidebar>\n          <Title className=\"sidebar-title\">Dairy App</Title>\n          <SubTitle className=\"sidebar-subtitle\">\n            Comment with no sense\n          </SubTitle>\n        </Sidebar>\n        <MainPage />\n        <ToastContainer />\n      </div>\n    </PersistGate>\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["store/actions/index.js","store/actionTypes/index.js","store/middlewares/dataAccessLayer.js","store/middlewares/index.js","store/reducers/menuReducer.js","utils/index.js","utils/updateComments.js","store/reducers/commentsReducer.js","store/reducers/index.js","store/index.js","components/Page/index.js","components/Page/Page.js","components/Button/index.js","components/Button/Button.js","components/Badge/index.js","components/Badge/Badge.js","components/Input/index.js","components/Input/Input.js","components/Title/index.js","components/Title/Title.js","components/List/List.js","components/List/ListItem.js","components/List/index.js","components/Menu/index.js","components/Menu/Menu.js","selectors/index.js","containers/MenuContainer.js","components/Icon/index.js","components/Icon/Icon.js","components/CommentsList/index.js","components/CommentsList/CommentsList.js","containers/CommentsListContainer.js","components/MainPage/MainPage.js","components/SubTitle/index.js","components/SubTitle/SubTitle.js","components/Sidebar/index.js","components/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["updateCommentsById","id","type","payload","getInitializeData","Promise","res","data","then","menuItems","map","item","Object","objectSpread","comments_number","comments","find","itemId","value","length","dataAccessLayer","store","next","action","rej","menu","active","getState","middlewares","thunk","createLogger","applyMiddleware","apply","initialState","proccessed","menuReducer","state","arguments","undefined","toConsumableArray","concat","filter","updateComments","combineReducers","commentsReducer","createStore","reducers","compose","dispatch","Page","_ref","className","children","react_default","a","createElement","Button","label","onClick","Badge","Input","placeholder","textarea","onChange","Title","List","title","header","components_Title","ListItem","Item","Menu","createItem","deleteItem","updateActive","updateNameItem","components_List","components_Input","event","target","components_Button","key","components_Badge","onDelete","stopPropagation","getActive","connect","getMenu","getMenuValue","Icon","color","CommentsList","components_Icon","avatar","text","console","log","getCommentsById","MainPage","components_Page","MenuContainer","CommentsListContainer","SubTitle","Sidebar","App","es","components_Sidebar","components_SubTitle","components_MainPage_MainPage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"shGAmDaA,EAAqB,SAAAC,GAChC,MAAO,CACLC,KCnDiC,wBDoDjCC,QAAS,CAAEF,sCEhDTG,EAAoB,kBACxB,IAAIC,QAAQ,SAAAC,GAAG,OAAIA,EAAIC,KAAOC,KAAK,SAAAD,GAAI,OACrCA,EAAKE,UAAUC,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAClBD,EADkB,CAErBG,iBAPoBb,EAOeU,EAAKV,GAN5CM,EAAKQ,SAASC,KAAK,SAAAL,GAAI,OAAIA,EAAKM,SAAWhB,IAAIiB,MAAMC,UAD7B,IAAAlB,OAoDXmB,EApCS,SAAAC,GAAK,OAAI,SAAAC,GAAI,OAAI,SAAAC,GACvC,OAAQA,EAAOrB,MACb,IDrB0B,iBCsBxB,OAAOE,IAAoBI,KAAK,SAAAD,GAAI,OAClCe,EAAKV,OAAAC,EAAA,EAAAD,CAAA,GACAW,EADD,CAEFpB,QAAS,CAAEI,aAGjB,ID1BiC,wBC2B/B,OAfkBN,EAeKsB,EAAOpB,QAAQF,GAd1C,IAAII,QAAQ,SAACC,EAAKkB,GAAN,OAAevB,EAAKK,EAAIC,GAAQiB,EAAI,oBAAoBhB,KAClE,SAAAD,GAAI,OAAIA,EAAKQ,SAASC,KAAK,SAAAD,GAAQ,OAAIA,EAASE,SAAWhB,OAafO,KAAK,SAAAO,GAAQ,OACrDO,EAAKV,OAAAC,EAAA,EAAAD,CAAA,GACAW,EADD,CAEFpB,QAAS,CAAEY,iBAGjB,IDzB0B,iBC0BxB,OAAOO,EAAKV,OAAAC,EAAA,EAAAD,CAAA,GACPW,EADM,CAETpB,QAAQS,OAAAC,EAAA,EAAAD,CAAA,GACHW,EAAOpB,QADL,CAELc,OAAQI,EAAMI,KAAKC,YAGzB,IDnCuB,cCoCrB,OAAOJ,EAAKV,OAAAC,EAAA,EAAAD,CAAA,GACPW,EADM,CAETpB,QAAS,CACPF,GAAIoB,EAAMM,WAAWF,KAAKlB,KAAKY,OAAS,MAG9C,QACE,OAAOG,EAAKC,GArCM,IAAAtB,KCRlB2B,EAAc,CAACC,IAAOT,EAAiBU,0BAE9BC,MAAeC,WAAf,EAAmBJ,UCN5BK,EAAe,CACnBC,YAAY,EACZ3B,KAAM,GACNmB,OAAQ,KACRR,MAAO,IAwCMiB,EArCK,WAAkC,IAAjCC,EAAiCC,UAAAlB,OAAA,QAAAmB,IAAAD,UAAA,GAAAA,UAAA,GAAzBJ,EAAcV,EAAWc,UAAAlB,OAAA,EAAAkB,UAAA,QAAAC,EACpD,OAAQf,EAAOrB,MACb,IHX0B,iBGYxB,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEEF,YAAY,EACZ3B,KAAMgB,EAAOpB,QAAQI,OAEzB,IHbyB,gBGcvB,OAAOK,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEEV,OAAQH,EAAOpB,QAAQF,KAE3B,IHV6B,oBGW3B,OAAOW,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEElB,MAAOK,EAAOpB,QAAQe,QAE1B,IHnBuB,cGoBrB,OAAON,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEE7B,KAAKK,OAAA2B,EAAA,EAAA3B,CACAwB,EAAM7B,MADPiC,OAAA,CAEF,CAAEvC,GAAIsB,EAAOpB,QAAQF,GAAIiB,MAAOkB,EAAMlB,MAAOJ,gBAAiB,KAEhEI,MAAO,KAEX,IH9BuB,cG+BrB,OAAON,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEE7B,KAAKK,OAAA2B,EAAA,EAAA3B,CAAKwB,EAAM7B,KAAKkC,OAAO,SAAA9B,GAAI,OAAIA,EAAKV,KAAOsB,EAAOpB,QAAQF,QAEnE,QACE,OAAOmC,ICxCEM,ECFQ,SAACN,EAAOrB,GAK7B,OAJuBqB,EAAM7B,KAAKS,KAChC,SAAAL,GAAI,OAAIA,EAAKM,SAAWF,EAASE,SAI1BmB,EAAM7B,KAGRK,OAAA2B,EAAA,EAAA3B,CAAIwB,EAAM7B,MAAjBiC,OAAA,CAAuBzB,KCNnBkB,EAAe,CACnB1B,KAAM,IAeO4B,EAZK,WAAkC,IAAjCC,EAAiCC,UAAAlB,OAAA,QAAAmB,IAAAD,UAAA,GAAAA,UAAA,GAAzBJ,EAAcV,EAAWc,UAAAlB,OAAA,EAAAkB,UAAA,QAAAC,EACpD,OAAQf,EAAOrB,MACb,INPiC,wBMQ/B,OAAOU,OAAAC,EAAA,EAAAD,CAAA,GACFwB,EADL,CAEE7B,KAAMmC,EAAeN,EAAOb,EAAOpB,QAAQY,YAE/C,QACE,OAAOqB,ICVEO,cAAgB,CAC7BlB,KAAMU,EACNpB,SAAU6B,ICDNvB,EAAQwB,YAAYC,OAAUR,EAAWS,YAAQnB,IACvDP,EAAM2B,STJG,CACL9C,KCJ0B,mBQSfmB,QCPA4B,SCGF,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,SAAd,OACXC,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,QAAAX,OAAUW,GAAa,KAAOC,KCJ/BI,SCGA,SAAAN,GAAA,IAAGC,EAAHD,EAAGC,UAAWM,EAAdP,EAAcO,MAAOC,EAArBR,EAAqBQ,QAArB,OACbL,EAAAC,EAAAC,cAAA,UAAQJ,UAAS,OAAAX,OAASW,GAAa,IAAMO,QAASA,GACnDD,KCLUE,SCGD,SAAAT,GAAA,IAAGC,EAAHD,EAAGC,UAAWjC,EAAdgC,EAAchC,MAAd,OACZmC,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,mBAAAX,OAAqBW,IACjCE,EAAAC,EAAAC,cAAA,QAAMJ,UAAU,SAASjC,MCLd0C,SCGD,SAAAV,GAAA,IAAGC,EAAHD,EAAGC,UAAWU,EAAdX,EAAcW,YAAaC,EAA3BZ,EAA2BY,SAAU5C,EAArCgC,EAAqChC,MAAO6C,EAA5Cb,EAA4Ca,SAA5C,OACZV,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,mBAAAX,OAAqBW,GAAa,KAC7CW,EACCT,EAAAC,EAAAC,cAAA,YACEJ,UAAU,QACVU,YAAaA,EACb3D,KAAK,OACLgB,MAAOA,EACP6C,SAAUA,IAGZV,EAAAC,EAAAC,cAAA,SACEJ,UAAU,QACVU,YAAaA,EACb3D,KAAK,OACLgB,MAAOA,EACP6C,SAAUA,OCnBHC,SCGD,SAAAd,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,SAAd,OACZC,EAAAC,EAAAC,cAAA,QAAMJ,UAAS,SAAAX,OAAWW,GAAa,KAAOC,KCkBjCa,SAjBF,SAAAf,GAAA,IAAGgB,EAAHhB,EAAGgB,MAAOC,EAAVjB,EAAUiB,OAAQf,EAAlBF,EAAkBE,SAAUD,EAA5BD,EAA4BC,UAA5B,OACXE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,kBACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,QAAAX,OAAUW,GAAa,KACnCE,EAAAC,EAAAC,cAACa,EAAD,CAAOjB,UAAU,cAAce,GAC9BC,GAAUA,EACXd,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,uBAAuBC,OCI7BiB,EAbE,SAAAnB,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,SAAU1B,EAAxBwB,EAAwBxB,OAAQgC,EAAhCR,EAAgCQ,QAAhC,OACfL,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,aAAAX,OAAeW,GAAa,IAAMO,QAASA,GACvDL,EAAAC,EAAAC,cAAA,QAAMJ,UAAS,kBAAAX,OAAoBd,EAAS,SAAW,MACtD0B,ICHLa,EAAKK,KAAOD,EAEGJ,QCHAM,ECWF,SAAArB,GAAA,IACXzB,EADWyB,EACXzB,KACAP,EAFWgC,EAEXhC,MACAQ,EAHWwB,EAGXxB,OACA8C,EAJWtB,EAIXsB,WACAC,EALWvB,EAKXuB,WACAC,EANWxB,EAMXwB,aACAC,EAPWzB,EAOXyB,eAPW,OASXtB,EAAAC,EAAAC,cAACqB,EAAD,CACEV,MAAO,QACPC,OACEd,EAAAC,EAAAC,cAAA,OAAKJ,UAAW,qBACdE,EAAAC,EAAAC,cAACsB,EAAD,CACE1B,UAAU,eACVjC,MAAOA,EACP2C,YAAY,oBACZE,SAAU,SAAAe,GAAK,OAAIH,EAAeG,EAAMC,OAAO7D,UAEjDmC,EAAAC,EAAAC,cAACyB,EAAD,CACE7B,UAAU,4BACVM,MAAM,UACNC,QAASc,MAKd/C,EAAKf,IAAI,SAAAC,GAAI,OACZ0C,EAAAC,EAAAC,cAACqB,EAAKN,KAAN,CACEW,IAAKtE,EAAKO,MACVQ,OAAQf,EAAKV,KAAOyB,EACpBgC,QAAS,kBAAMgB,EAAa/D,EAAKV,MAEhCU,EAAKO,MACNmC,EAAAC,EAAAC,cAAC2B,EAAD,CAAO/B,UAAU,qBAAqBjC,MAAOP,EAAKG,kBAClDuC,EAAAC,EAAAC,cAACyB,EAAD,CACE7B,UAAU,qBACVM,MAAO,SACPC,SA3CcyB,EA2CUV,EA3CAxE,EA2CYU,EAAKV,GA3CV,SAAA6E,GACvCA,EAAMM,kBACND,EAASlF,QAFY,IAACkF,EAAUlF,MCHrBoF,EAAY,SAAAjD,GAAK,OAAIA,EAAMX,KAAKC,QCqB9B4D,cAbS,SAAAlD,GAAK,MAAK,CAChCX,KDXqB,SAAAW,GAAK,OAAIA,EAAMX,KAAKlB,KCWnCgF,CAAQnD,GACdV,OAAQ2D,EAAUjD,GAClBlB,MDT0B,SAAAkB,GAAK,OAAIA,EAAMX,KAAKP,MCSvCsE,CAAapD,KAGK,SAAAY,GAAQ,MAAK,CACtCwB,WAAY,kBAAMxB,E1BOX,CACL9C,KCpBuB,cDqBvBC,QAAS,CAAEQ,UAHW,IAAAA,G0BLxB+D,aAAc,SAAAzE,GAAE,OAAI+C,E1BbM,SAAA/C,GAAE,OAAI,SAAA+C,GAChCA,EAAShD,EAAmBC,IAE5B+C,EAAS,CACP9C,KCRyB,gBDSzBC,QAAS,CAAEF,S0BQgByE,CAAazE,KAC1CwE,WAAY,SAAAxE,GAAE,OAAI+C,E1BLM,SAAA/C,GACxB,MAAO,CACLC,KCbuB,cDcvBC,QAAS,CACPF,O0BCuBwE,CAAWxE,KACtC0E,eAAgB,SAAAzD,GAAK,OAAI8B,E1BmBG,SAAA9B,GAC5B,MAAO,CACLhB,KChC6B,oBDiC7BC,QAAS,CACPe,U0BvB8ByD,CAAezD,OAGpCoE,CAGbf,GC3BakB,SCGF,SAAAvC,GAAA,IAAGwC,EAAHxC,EAAGwC,MAAH,OAAerC,EAAAC,EAAAC,cAAA,QAAMJ,UAAS,QAAAX,OAAUkD,OCHtCC,SCOM,SAAAzC,GAAA,IAAGxB,EAAHwB,EAAGxB,OAAQX,EAAXmC,EAAWnC,SAAX,OACnBW,GACE2B,EAAAC,EAAAC,cAACqB,EAAD,CAAMV,MAAK,aAAA1B,OAAed,GAAkB,KACzCX,GACCA,EAASG,OACTH,EAASG,MAAMR,IAAI,SAAAC,GAAI,OACrB0C,EAAAC,EAAAC,cAACqB,EAAKN,KAAN,CAAWnB,UAAU,oBAAoB8B,IAAKtE,EAAKV,IACjDoD,EAAAC,EAAAC,cAACqC,EAAD,CAAMF,MAAO/E,EAAKkF,SACjBlF,EAAKmF,QAGZzC,EAAAC,EAAAC,cAACqB,EAAKN,KAAN,CAAWnB,UAAU,yBACnBE,EAAAC,EAAAC,cAACqC,EAAD,CAAMF,MAAM,SACZrC,EAAAC,EAAAC,cAACsB,EAAD,CAAOf,UAAQ,EAACC,SAAU,SAAAe,GAAK,OAAIiB,QAAQC,IAAIlB,EAAMC,OAAO7D,cCLrDoE,cATS,SAAAlD,GAAK,MAAK,CAChCV,OAAQ2D,EAAUjD,GAClBrB,SAAUsE,EAAUjD,GNVS,SAACA,EAAOnC,GAAR,OAC7BmC,EAAMrB,SAASR,KAAKS,KAAK,SAAAL,GAAI,OAAIA,EAAKM,SAAWhB,IMSpBgG,CAAgB7D,EAAOiD,EAAUjD,IAAU,KAG/C,SAAAY,GAAQ,MAAK,CACtChD,mBAAoB,SAAAC,GAAE,OAAI+C,EAAShD,EAAmBC,OAGzCqF,CAGbK,GCPaO,EAPE,kBACf7C,EAAAC,EAAAC,cAAC4C,EAAD,KACE9C,EAAAC,EAAAC,cAAC6C,EAAD,MACA/C,EAAAC,EAAAC,cAAC8C,EAAD,QCPWC,SCGE,SAAApD,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,SAAd,OACfC,EAAAC,EAAAC,cAAA,QAAMJ,UAAS,YAAAX,OAAcW,GAAa,KAAOC,KCJpCmD,SCEC,SAAArD,GAAA,IAAGE,EAAHF,EAAGE,SAAH,OACdC,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,qBAAqBC,KCmBvBoD,SAZH,kBACVnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUpF,MAAOA,GACfgC,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,OACbE,EAAAC,EAAAC,cAACmD,EAAD,KACErD,EAAAC,EAAAC,cAACa,EAAD,CAAOjB,UAAU,iBAAjB,aACAE,EAAAC,EAAAC,cAACoD,EAAD,CAAUxD,UAAU,oBAApB,0BAEFE,EAAAC,EAAAC,cAACqD,EAAD,UCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjH,KAAK,SAAAkH,GACjCA,EAAaC","file":"static/js/main.0455d06e.chunk.js","sourcesContent":["import * as actionTypes from \"../actionTypes\";\r\n\r\nexport const initializeApp = () => {\r\n  return {\r\n    type: actionTypes.INITIALIZE_APP\r\n  };\r\n};\r\n\r\nexport const updateActive = id => dispatch => {\r\n  dispatch(updateCommentsById(id));\r\n\r\n  dispatch({\r\n    type: actionTypes.UPDATE_ACTIVE,\r\n    payload: { id }\r\n  });\r\n};\r\n\r\nexport const deleteItem = id => {\r\n  return {\r\n    type: actionTypes.DELETE_ITEM,\r\n    payload: {\r\n      id\r\n    }\r\n  };\r\n};\r\n\r\nexport const createItem = item => {\r\n  return {\r\n    type: actionTypes.CREATE_ITEM,\r\n    payload: { item }\r\n  };\r\n};\r\n\r\nexport const createComment = comment => {\r\n  return {\r\n    type: actionTypes.CREATE_COMMENT,\r\n    payload: {\r\n      comment\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateNameItem = value => {\r\n  return {\r\n    type: actionTypes.UPDATE_NAME_INPUT,\r\n    payload: {\r\n      value\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateCommentsById = id => {\r\n  return {\r\n    type: actionTypes.UPDATE_COMMENTS_BY_ID,\r\n    payload: { id }\r\n  };\r\n};\r\n","export const INITIALIZE_APP = \"INITIALIZE_APP\";\r\n\r\nexport const UPDATE_COMMENTS_BY_ID = \"UPDATE_COMMENTS_BY_ID\";\r\n\r\nexport const UPDATE_ACTIVE = \"UPDATE_ACTIVE\";\r\n\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\n\r\nexport const CREATE_ITEM = \"CREATE_ITEM\";\r\n\r\nexport const CREATE_COMMENT = \"CREATE_COMMENT\";\r\n\r\nexport const UPDATE_NAME_INPUT = \"UPDATE_NAME_INPUT\";\r\n","import * as actionTypes from \"../actionTypes\";\r\nimport data from \"./data.json\";\r\n\r\nconst getCommentsNumber = id =>\r\n  data.comments.find(item => item.itemId === id).value.length;\r\n\r\nconst getInitializeData = () =>\r\n  new Promise(res => res(data)).then(data =>\r\n    data.menuItems.map(item => ({\r\n      ...item,\r\n      comments_number: getCommentsNumber(item.id)\r\n    }))\r\n  );\r\n\r\nconst getCommentsById = id =>\r\n  new Promise((res, rej) => (id ? res(data) : rej(\"active is null\"))).then(\r\n    data => data.comments.find(comments => comments.itemId === id)\r\n  );\r\n\r\nconst dataAccessLayer = store => next => action => {\r\n  switch (action.type) {\r\n    case actionTypes.INITIALIZE_APP:\r\n      return getInitializeData().then(data =>\r\n        next({\r\n          ...action,\r\n          payload: { data }\r\n        })\r\n      );\r\n    case actionTypes.UPDATE_COMMENTS_BY_ID:\r\n      return getCommentsById(action.payload.id).then(comments =>\r\n        next({\r\n          ...action,\r\n          payload: { comments }\r\n        })\r\n      );\r\n    case actionTypes.CREATE_COMMENT:\r\n      return next({\r\n        ...action,\r\n        payload: {\r\n          ...action.payload,\r\n          itemId: store.menu.active\r\n        }\r\n      });\r\n    case actionTypes.CREATE_ITEM:\r\n      return next({\r\n        ...action,\r\n        payload: {\r\n          id: store.getState().menu.data.length + 1\r\n        }\r\n      });\r\n    default:\r\n      return next(action);\r\n  }\r\n};\r\n\r\nexport default dataAccessLayer;\r\n","import { applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\n\r\nimport dataAccessLayer from \"./dataAccessLayer\";\r\n\r\nconst middlewares = [thunk, dataAccessLayer, createLogger()];\r\n\r\nexport default applyMiddleware(...middlewares);\r\n","import * as actionTypes from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  proccessed: true,\r\n  data: [],\r\n  active: null,\r\n  value: \"\"\r\n};\r\n\r\nconst menuReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.INITIALIZE_APP:\r\n      return {\r\n        ...state,\r\n        proccessed: false,\r\n        data: action.payload.data\r\n      };\r\n    case actionTypes.UPDATE_ACTIVE:\r\n      return {\r\n        ...state,\r\n        active: action.payload.id\r\n      };\r\n    case actionTypes.UPDATE_NAME_INPUT:\r\n      return {\r\n        ...state,\r\n        value: action.payload.value\r\n      };\r\n    case actionTypes.CREATE_ITEM:\r\n      return {\r\n        ...state,\r\n        data: [\r\n          ...state.data,\r\n          { id: action.payload.id, value: state.value, comments_number: 0 }\r\n        ],\r\n        value: \"\"\r\n      };\r\n    case actionTypes.DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        data: [...state.data.filter(item => item.id !== action.payload.id)]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default menuReducer;\r\n","import updateComments from \"./updateComments\";\r\n\r\nexport default updateComments;\r\n","const updateComments = (state, comments) => {\r\n  const commentsIsFind = state.data.find(\r\n    item => item.itemId === comments.itemId\r\n  );\r\n\r\n  if (commentsIsFind) {\r\n    return state.data;\r\n  }\r\n\r\n  return [...state.data, comments];\r\n};\r\n\r\nexport default updateComments;\r\n","import * as actionTypes from \"../actionTypes\";\r\nimport updateComments from \"../../utils\";\r\n\r\nconst initialState = {\r\n  data: []\r\n};\r\n\r\nconst menuReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.UPDATE_COMMENTS_BY_ID:\r\n      return {\r\n        ...state,\r\n        data: updateComments(state, action.payload.comments)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default menuReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport menuReducer from \"./menuReducer\";\r\nimport commentsReducer from \"./commentsReducer\";\r\n\r\nexport default combineReducers({\r\n  menu: menuReducer,\r\n  comments: commentsReducer\r\n});\r\n","import { createStore, compose } from \"redux\";\r\n\r\nimport { initializeApp } from \"./actions\";\r\nimport middlewares from \"./middlewares\";\r\nimport reducers from \"./reducers\";\r\n\r\nconst store = createStore(reducers, undefined, compose(middlewares));\r\nstore.dispatch(initializeApp());\r\n\r\nexport default store;\r\n","import Page from \"./Page\";\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Page.css\";\r\n\r\nconst Page = ({ className, children }) => (\r\n  <div className={`page ${className || \"\"}`}>{children}</div>\r\n);\r\n\r\nPage.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Page;\r\n","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Button.css\";\r\n\r\nconst Button = ({ className, label, onClick }) => (\r\n  <button className={`btn ${className || \"\"}`} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  className: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nexport default Button;\r\n","import Badge from \"./Badge\";\r\n\r\nexport default Badge;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Badge.css\";\r\n\r\nconst Badge = ({ className, value }) => (\r\n  <div className={`badge-container ${className}`}>\r\n    <span className=\"badge\">{value}</span>\r\n  </div>\r\n);\r\n\r\nBadge.propTypes = {\r\n  className: PropTypes.string,\r\n  value: PropTypes.number\r\n};\r\n\r\nexport default Badge;\r\n","import Input from \"./Input\";\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Input.css\";\r\n\r\nconst Input = ({ className, placeholder, textarea, value, onChange }) => (\r\n  <div className={`input-container ${className || \"\"}`}>\r\n    {textarea ? (\r\n      <textarea\r\n        className=\"input\"\r\n        placeholder={placeholder}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    ) : (\r\n      <input\r\n        className=\"input\"\r\n        placeholder={placeholder}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    )}\r\n  </div>\r\n);\r\n\r\nInput.propTypes = {\r\n  className: PropTypes.string,\r\n  textarea: PropTypes.bool,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func\r\n};\r\n\r\nexport default Input;\r\n","import Title from \"./Title\";\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Title.css\";\r\n\r\nconst Title = ({ className, children }) => (\r\n  <span className={`title ${className || \"\"}`}>{children}</span>\r\n);\r\n\r\nTitle.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Title from \"../Title\";\r\n\r\nimport \"./List.css\";\r\n\r\nconst List = ({ title, header, children, className }) => (\r\n  <div className=\"list-container\">\r\n    <div className={`list ${className || \"\"}`}>\r\n      <Title className=\"list-title\">{title}</Title>\r\n      {header && header}\r\n      <div className=\"list-item-container\">{children}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nList.propTypes = {\r\n  title: PropTypes.string,\r\n  header: PropTypes.node,\r\n  children: PropTypes.node,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ className, children, active, onClick }) => (\r\n  <div className={`list-item ${className || \"\"}`} onClick={onClick}>\r\n    <span className={`list-indicator ${active ? \"active\" : \"\"}`} />\r\n    {children}\r\n  </div>\r\n);\r\n\r\nListItem.propTypes = {\r\n  active: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default ListItem;\r\n","import List from \"./List\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nList.Item = ListItem;\r\n\r\nexport default List;\r\n","import Menu from \"./Menu\";\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Button from \"../Button\";\r\nimport Badge from \"../Badge\";\r\nimport Input from \"../Input\";\r\nimport List from \"../List\";\r\n\r\nconst handleOnDelete = (onDelete, id) => event => {\r\n  event.stopPropagation();\r\n  onDelete(id);\r\n};\r\n\r\nconst Menu = ({\r\n  menu,\r\n  value,\r\n  active,\r\n  createItem,\r\n  deleteItem,\r\n  updateActive,\r\n  updateNameItem\r\n}) => (\r\n  <List\r\n    title={\"Items\"}\r\n    header={\r\n      <div className={\"header-items-list\"}>\r\n        <Input\r\n          className=\"header-input\"\r\n          value={value}\r\n          placeholder=\"Type name here...\"\r\n          onChange={event => updateNameItem(event.target.value)}\r\n        />\r\n        <Button\r\n          className=\"btn-success header-button\"\r\n          label=\"Add New\"\r\n          onClick={createItem}\r\n        />\r\n      </div>\r\n    }\r\n  >\r\n    {menu.map(item => (\r\n      <List.Item\r\n        key={item.value}\r\n        active={item.id === active}\r\n        onClick={() => updateActive(item.id)}\r\n      >\r\n        {item.value}\r\n        <Badge className=\"success-background\" value={item.comments_number} />\r\n        <Button\r\n          className=\"btn-danger outline\"\r\n          label={\"Delete\"}\r\n          onClick={handleOnDelete(deleteItem, item.id)}\r\n        />\r\n      </List.Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nMenu.propTypes = {\r\n  menu: PropTypes.array,\r\n  value: PropTypes.string,\r\n  createItem: PropTypes.func,\r\n  deleteItem: PropTypes.func,\r\n  updateActive: PropTypes.func,\r\n  updateNameItem: PropTypes.func\r\n};\r\n\r\nexport default Menu;\r\n","export const getCommentsById = (state, id) =>\r\n  state.comments.data.find(item => item.itemId === id);\r\n\r\nexport const getMenu = state => state.menu.data;\r\n\r\nexport const getActive = state => state.menu.active;\r\n\r\nexport const getMenuValue = state => state.menu.value;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport Menu from \"../components/Menu\";\r\n\r\nimport { getMenu, getActive, getMenuValue } from \"../selectors\";\r\n\r\nimport {\r\n  createItem,\r\n  deleteItem,\r\n  updateActive,\r\n  updateNameItem\r\n} from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  menu: getMenu(state),\r\n  active: getActive(state),\r\n  value: getMenuValue(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  createItem: () => dispatch(createItem()),\r\n  updateActive: id => dispatch(updateActive(id)),\r\n  deleteItem: id => dispatch(deleteItem(id)),\r\n  updateNameItem: value => dispatch(updateNameItem(value))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Menu);\r\n","import Icon from \"./Icon\";\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Icon.css\";\r\n\r\nconst Icon = ({ color }) => <span className={`icon ${color}`} />;\r\n\r\nIcon.propTypes = {\r\n  color: PropTypes.string\r\n};\r\n\r\nexport default Icon;\r\n","import CommentsList from \"./CommentsList\";\r\n\r\nexport default CommentsList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Icon from \"../Icon\";\r\nimport Input from \"../Input\";\r\nimport List from \"../List\";\r\n\r\nimport \"./CommentsList.css\";\r\n\r\nconst CommentsList = ({ active, comments }) =>\r\n  active && (\r\n    <List title={`Comments #${active ? active : \"\"}`}>\r\n      {comments &&\r\n        comments.value &&\r\n        comments.value.map(item => (\r\n          <List.Item className=\"comment-container\" key={item.id}>\r\n            <Icon color={item.avatar} />\r\n            {item.text}\r\n          </List.Item>\r\n        ))}\r\n      <List.Item className=\"new-comment-container\">\r\n        <Icon color=\"grey\" />\r\n        <Input textarea onChange={event => console.log(event.target.value)} />\r\n      </List.Item>\r\n    </List>\r\n  );\r\n\r\nCommentsList.propTypes = {\r\n  active: PropTypes.number,\r\n  comments: PropTypes.array\r\n};\r\n\r\nexport default CommentsList;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport CommentsList from \"../components/CommentsList\";\r\n\r\nimport { getCommentsById, getActive } from \"../selectors\";\r\n\r\nimport { updateCommentsById } from \"../store/actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  active: getActive(state),\r\n  comments: getActive(state) ? getCommentsById(state, getActive(state)) : []\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateCommentsById: id => dispatch(updateCommentsById(id))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CommentsList);\r\n","import React from \"react\";\r\n\r\nimport Page from \"../Page\";\r\nimport MenuContainer from \"../../containers/MenuContainer\";\r\nimport CommentsListContainer from \"../../containers/CommentsListContainer\";\r\n\r\nconst MainPage = () => (\r\n  <Page>\r\n    <MenuContainer />\r\n    <CommentsListContainer />\r\n  </Page>\r\n);\r\n\r\nexport default MainPage;\r\n","import SubTitle from \"./SubTitle\";\r\n\r\nexport default SubTitle;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./SubTitle.css\";\r\n\r\nconst SubTitle = ({ className, children }) => (\r\n  <span className={`subtitle ${className || \"\"}`}>{children}</span>\r\n);\r\n\r\nSubTitle.propTypes = {\r\n  className: PropTypes.string,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default SubTitle;\r\n","import Sidebar from \"./Sidebar\";\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nimport \"./Sidebar.css\";\r\n\r\nconst Sidebar = ({ children }) => (\r\n  <div className=\"sidebar-container\">{children}</div>\r\n);\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./store\";\r\n\r\nimport MainPage from \"./components/MainPage/MainPage\";\r\nimport Title from \"./components/Title\";\r\nimport SubTitle from \"./components/SubTitle\";\r\nimport Sidebar from \"./components/Sidebar\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <div className=\"App\">\r\n      <Sidebar>\r\n        <Title className=\"sidebar-title\">Dairy App</Title>\r\n        <SubTitle className=\"sidebar-subtitle\">Comment with no sense</SubTitle>\r\n      </Sidebar>\r\n      <MainPage />\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}